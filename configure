#! /usr/bin/perl -w
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# GENIE configuration script
#
# For help, type ./configure --help
#
# C.Andreopoulos <C.V.Andreopoulos@rl.ac.uk>, Rutherford Lab.
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# print out info & exit if any of the command-line arguments was --help
#
if(($match = grep(/--help/i, @ARGV)) > 0) { 
  print "\n";
  print "*** GENIE configure script *** \n\n";
  print "Usage: ./configure [option]... [flag=value]... \n\n";
  print "    FLAG            DESCRIPTION                                             DEFAULT\n\n";
  print "    --prefix        installation location (for 'make install')              /usr/local/\n\n";
  print "enable/disable options with either --enable- or --disable- (eg --enable-gibuu --disable-flux-drivers)\n\n";
  print "    profiler        GENIE code profiling using Google perftools             default: disabled \n";
  print "    nuvalidator     GENIE's NuValidator tool, requires MySQL                default: disabled \n";
  print "    neugen          GENIE/NeuGEN facade, requires libneugen3.a              default: disabled \n";
  print "    gibuu           GiBUU intranuclear cascade MC, requires libGiBUU.a      default: disabled \n";
  print "    flux-drivers    Built-in flux drivers                                   default: enabled  \n";
  print "    geom-drivers    Built-in detector geometry drivers                      default: enabled  \n";
  print "    doxygen-doc     Generate doxygen documentation at build time            default: disabled \n";
  print "    test            Build test programs                                     default: disabled \n";
  print "    viewer          Event generation GUI _incomplete_                       default: disabled \n";
  print "    mueloss         Muon energy loss modeling                               default: enabled  \n";
  print "    dylibversion    Adds version number in dynamic lib names [recommended]  default: enabled  \n";
  print "    debug           Adds -g in the compiler options to request debug info   default: disabled \n\n";
  print "with options for 3rd party software, prefix with --with- (eg --with-gibuu-lib=/some/path/libGiBUU.a)\n\n";
  print "    optimiz-level   compiler opitimization level O/O2/O3/OO/Os   default: O2 \n";
  print "    profiler-lib    Path to libprofiler.so library               if you --enable-profiler \n";
  print "    neugen3path     NeuGEN top level directory                   if you --enable-neugen  / can pick \$NEUGEN3PATH \n";
  print "    gibuu-lib       Path to libGiBUU.a library                   if you --enable-gibuu   / can pick \$GIBUU_LIB   \n";
  print "    doxygen         Doxygen binary including full path           if you --enable-doxygen / can pick \$DOXYGEN     \n";
  print "    pythia6         PYTHIA6 library path                         always needed / can pick \$PYTHIA6 / auto-detected \n";
  print "    cernlib         CERN libraries path                          always needed / can pick \$CERNLIB / auto-detected \n";
  print "    libxml2-inc     Path to libxml2 includes                     always needed / auto-detected \n";
  print "    libxml2-lib     Path to libxml2 library                      always needed / auto-detected \n";
  print "    log4cpp-inc     Path to log4cpp includes                     always needed / auto-detected \n";
  print "    log4cpp-lib     Path to log4cpp library                      always needed / auto-detected \n\n";
  exit;
}

# Check that $GENIE is set
#
$GENIE = $ENV{'GENIE'};
die ("*** Error *** The GENIE environmental variable (pointing to the top level GENIE directory) is not defined") 
unless defined $GENIE;

# Check that $ROOTSYS is set
#
$ROOTSYS = $ENV{'ROOTSYS'};
die ("*** Error *** The ROOTSYS environmental variable is not defined. Is ROOT installed?") 
unless defined $ROOTSYS;

# Print GENIE banner 
#
$BANNER_FILE = "$GENIE/data/banner/BANNER.txt";
if(-e $BANNER_FILE) {
  open(BANNER, "<$BANNER_FILE");
  @hdr=<BANNER>;
  print @hdr;
  close(BANNER);
}

# Enable auto-detection?
#
system("find $GENIE/src/configure");
print "\n";
$auto_detect = ($?==0) ? 1 : 0;
if(! $auto_detect) {
     print "\n *** Warn *** Path auto-detection is turned off. You need the 'find' utility to use that feature\n\n";
}

# Open Make.config to write configuration options
#
$MKCONF_FILE = "$GENIE/src/make/Make.config";
open(MKCONF, ">$MKCONF_FILE") or die("Can not write out the Make.config file!");

print MKCONF "# Make.config \n";
print MKCONF "# This file was automatically generated by the 'configure' script  \n";
print MKCONF "# and is included into the project Makefiles  \n";

# Create a string by joining all the command line arguments
#
my $options = join(" ", @ARGV);

# Get & save installation location (--prefix) or set default
#
my $prefix="/usr/local/";
if(($match = grep(/--prefix/i, @ARGV)) > 0) { 
  $options=~m/--prefix=(\S*)/i;
  $prefix = $1;
  if( $GENIE eq $prefix ) {
     print " *** Error *** --prefix can not point to the GENIE top level directory!\n\n";
     exit;
  }
}
print MKCONF "GENIE_INSTALLATION_PATH=$prefix\n";

# Default --enable/--disable config options (for a minimal genie build)
#
my $gopt_enable_profiler     = "NO";
my $gopt_enable_nuvalidator  = "NO";
my $gopt_enable_neugen       = "NO";
my $gopt_enable_gibuu        = "NO";
my $gopt_enable_flux_drivers = "YES";
my $gopt_enable_geom_drivers = "YES";
my $gopt_enable_doxygen_doc  = "NO";
my $gopt_enable_test         = "NO";
my $gopt_enable_viewer       = "NO";
my $gopt_enable_mueloss      = "YES";
my $gopt_enable_dylibversion = "YES";
my $gopt_enable_debug        = "NO";

# Check configure's command line arguments for non-default values
#
if(($match = grep(/--enable-profiler/i,      @ARGV)) > 0) { $gopt_enable_profiler     = "YES"; }
if(($match = grep(/--enable-nuvalidator/i,   @ARGV)) > 0) { $gopt_enable_nuvalidator  = "YES"; }
if(($match = grep(/--enable-neugen/i,        @ARGV)) > 0) { $gopt_enable_neugen       = "YES"; }
if(($match = grep(/--enable-gibuu/i,         @ARGV)) > 0) { $gopt_enable_gibuu        = "YES"; }
if(($match = grep(/--enable-doxygen-doc/i,   @ARGV)) > 0) { $gopt_enable_doxygen_doc  = "YES"; }
if(($match = grep(/--enable-test/i,          @ARGV)) > 0) { $gopt_enable_test         = "YES"; }
if(($match = grep(/--enable-viewer/i,        @ARGV)) > 0) { $gopt_enable_viewer       = "YES"; }
if(($match = grep(/--enable-debug/i,         @ARGV)) > 0) { $gopt_enable_debug        = "YES"; }
if(($match = grep(/--disable-flux-drivers/i, @ARGV)) > 0) { $gopt_enable_flux_drivers = "NO";  }
if(($match = grep(/--disable-geom-drivers/i, @ARGV)) > 0) { $gopt_enable_geom_drivers = "NO";  }
if(($match = grep(/--disable-mueloss/i,      @ARGV)) > 0) { $gopt_enable_mueloss      = "NO";  }
if(($match = grep(/--disable-dylibversion/i, @ARGV)) > 0) { $gopt_enable_dylibversion = "NO";  }

my $gopt_cxx_debug_flag="";
if($gopt_enable_debug eq "YES") { $gopt_cxx_debug_flag = "-g"; }

# Save config options
#
print MKCONF "GOPT_ENABLE_PROFILER=$gopt_enable_profiler\n";
print MKCONF "GOPT_ENABLE_NUVALIDATOR=$gopt_enable_nuvalidator\n"; 
print MKCONF "GOPT_ENABLE_NEUGEN=$gopt_enable_neugen\n";
print MKCONF "GOPT_ENABLE_GIBUU=$gopt_enable_gibuu\n";
print MKCONF "GOPT_ENABLE_FLUX_DRIVERS=$gopt_enable_flux_drivers\n";
print MKCONF "GOPT_ENABLE_GEOM_DRIVERS=$gopt_enable_geom_drivers\n";
print MKCONF "GOPT_ENABLE_DOXYGEN_DOC=$gopt_enable_doxygen_doc\n"; 
print MKCONF "GOPT_ENABLE_TEST=$gopt_enable_test\n";
print MKCONF "GOPT_ENABLE_VIEWER=$gopt_enable_viewer\n";
print MKCONF "GOPT_ENABLE_MUELOSS=$gopt_enable_mueloss\n";
print MKCONF "GOPT_ENABLE_DYLIBVERSION=$gopt_enable_dylibversion\n";
print MKCONF "GOPT_CXX_DEBUG_FLAG=$gopt_cxx_debug_flag\n";

# Check for --with options:

# Check compiler optimization level
#
my $gopt_cxx_optimiz_flag="O2"; # default
if( $options=~m/--with-optimiz-level=(\S*)/i ) {
  $gopt_cxx_optimiz_flag = $1;
}

# If --enable-profiler was set then the full path to the profiler library must be specified
#
my $gprofiler_lib = "";
if($gopt_enable_profiler eq "YES") {
  if(($match = grep(/--with-profiler-lib/i, @ARGV)) > 0) { 
    $options=~m/--with-profiler-lib=(\S*)/i;
    $gprofiler_lib = $1;
  }
}

# If --enable-neugen was set then the location to the neugen installation must be specified
#
my $neugen3path = "";
if($gopt_enable_neugen eq "YES") {
  if(($match = grep(/--with-neugen3path/i, @ARGV)) > 0) { 
    $options=~m/--with-neugen3path=(\S*)/i;
    $neugen3path = $1;
  }
  # if it was not set, try to pick it up from the environment
  if($neugen3path eq "" && defined $ENV{'NEUGEN3PATH'}) { $neugen3path = $ENV{'NEUGEN3PATH'}; }
  # check
  my $file = "$neugen3path/lib/libneugen3.a";
  if(! -e $file) {
     print " *** Error *** You need to specify the top level neugen3 directory using --with-neugen3path=/some/path/\n";
     print "               (alternatively, you can --disable-neugen)\n\n";
     exit;
  }
}

# If --enable-gibuu was set then the full path to the libGiBUU.a library must be specified
#
my $gibuu_lib = "";
if($gopt_enable_gibuu eq "YES") {
  if(($match = grep(/--with-gibuu-lib/i, @ARGV)) > 0) { 
    $options=~m/--with-gibuu-lib=(\S*)/i;
    $gibuu_lib = $1;
  }
  # if it was not set, try to pick it up from the environment
  if($gibuu_lib eq "" && defined $ENV{'GIBUU_LIB'}) { $gibuu_lib = $ENV{'GIBUU_LIB'}; }
  # check
  my $file = "$gibuu_lib/libGiBUU.a";
  if(! -e $file) {
     print " *** Error *** You need to specify the path to the libGiBUU.a library using --with-gibuu-lib=/some/path/\n";
     print "               (alternatively, you can --disable-gibuu)\n\n";
     exit;
  }
}

# If --enable-doxygen was set then the full path to the doxygen binary must be specified
# unless it is in the $PATH
#
my $doxygen = "";
if($gopt_enable_doxygen_doc eq "YES") {
  if(($match = grep(/--with-doxygen/i, @ARGV)) > 0) { 
    $options=~m/--with-doxygen=(\S*)/i;
    $doxygen = $1;
  }
  # if it was not set, try to pick it up from the environment
  if(! -f $doxygen && defined $ENV{'DOXYGEN'}) { $doxygen = $ENV{'DOXYGEN'}; }
  # complain
  if(! -f $doxygen) {
     print " *** Error *** You need to specify the path to doxygen using --with-doxygen=/some/path/\n";
     print "               (alternatively, you can --disable-doxygen-doc)\n\n";
     exit;
  }
}

# If --enable-nuvalidator was set then ROOT must have mysql support enabled
#
if($gopt_enable_nuvalidator eq "YES") {

}

# Get PYTHIA6 and CERNLIB

my $pythia6 = "";
my $cernlib = "";

#
# --with-pythia6=
#
if($options=~m/--with-pythia6=(\S*)/i) {
  $pythia6 = $1;
}
# if it was not set, try to pick it up from the environment
if(! -d $pythia6 && defined $ENV{'PYTHIA6'}) { 
  $pythia6 = $ENV{'PYTHIA6'}; 
  print " *** Warn *** You didn't specify the PYTHIA6 path -- Picking up the \$PYTHIA6 env var\n";
  print "              Setting --with-pythia6=$pythia6\n\n";
}
# if it still not set, try autodetecting it
if(! -d $pythia6 && $auto_detect) 
{
  print " *** Warn *** You didn't specify the PYTHIA6 path -- Autodetecting...\n";
  $matched = auto_detect("libPythia6*");
  if( $matched=~m/(\S*)\/libPythia6\S*/i ) {
     $pythia6 = $1;
  }
  print "              Setting --with-pythia6=$pythia6\n\n";
}
if(! -d $pythia6) {
    print " *** Error *** You need to specify the PYTHIA6 library path using --with-pythia6=/some/path/\n\n";
    exit;
} 

#
# --with-cernlib=
#
if($options=~m/--with-cernlib=(\S*)/i) {
  $cernlib = $1;
}
# if it was not set, try to pick it up from the environment
if(! -d $cernlib && defined $ENV{'CERNLIB'}) { 
  $cernlib = $ENV{'CERNLIB'}; 
  print " *** Warn *** You didn't specify the CERNLIB path -- Picking up the \$CERNLIB env var\n";
  print "              Setting --with-cernlib=$cernlib\n\n";
}
# if it still not set, try autodetecting it
if(! -d $cernlib && $auto_detect) 
{
  print " *** Warn *** You didn't specify the CERNLIB path -- Autodetecting...\n";
  $matched = auto_detect("libpdflib*.*");
  if( $matched=~m/(\S*)\/libpdflib\S*/i ) {
     $cernlib = $1;
  }
  print "              Setting --with-cernlib=$cernlib\n\n";
}
if(! -d $cernlib) {
    print " *** Error *** You need to specify the CERNLIB library path using --with-cernlib=/some/path/\n\n";
    exit;
}

# Get libxml2 and log4cpp include and library paths 

my $libxml2_inc = "";
my $libxml2_lib = "";
my $log4cpp_inc = "";
my $log4cpp_lib = "";

#
# --with-libxml2-inc=
#
if($options=~m/--with-libxml2-inc=(\S*)/i) {
  $libxml2_inc = $1;
}
if(! -d $libxml2_inc && $auto_detect)  {
  print " *** Warn *** You didn't specify the libxml2 include path -- Autodetecting...\n";
  $matched = auto_detect("xmlmemory.h");
  if( $matched=~m/(\S*)\/libxml\/xmlmemory.h/i ) {
     $libxml2_inc = $1;
  }
  print "              Setting --with-libxml2-inc=$libxml2_inc\n\n";
}
if(! -d $libxml2_inc) {
  print " *** Error *** You need to specify the libxml2 include path using --with-libxml2-inc=/some/path/\n\n";
  exit;
}

#
# --with-libxml2-lib=
#
if($options=~m/--with-libxml2-lib=(\S*)/i) {
  $libxml2_lib = $1;
}
if(! -d $libxml2_lib && $auto_detect)  {
  print " *** Warn *** You didn't specify the libxml2 library path -- Autodetecting...\n";
  $matched = auto_detect("libxml2.*");
  if( $matched=~m/(\S*)\/libxml2\S*/i ) {
     $libxml2_lib = $1;
  }
  print "              Setting --with-libxml2-lib=$libxml2_lib\n\n";
}
if(! -d $libxml2_lib) {
  print " *** Error *** You need to specify the libxml2 library path using --with-libxml2-lib=/some/path/\n\n";
  exit;
}

#
# --with-log4cpp-inc=
#
if($options=~m/--with-log4cpp-inc=(\S*)/i) {
  $log4cpp_inc = $1;
}
if(! -d $log4cpp_inc && $auto_detect)  {
  print " *** Warn *** You didn't specify the log4cpp include path -- Autodetecting...\n";
  $matched = auto_detect("OstreamAppender.hh");
  if( $matched=~m/(\S*)\/log4cpp\/OstreamAppender.hh/i ) {
     $log4cpp_inc = $1;
  }
  print "              Setting --with-log4cpp-inc=$log4cpp_inc\n\n";
}
if(! -d $log4cpp_inc) {
  print " *** Error *** You need to specify the log4cpp include path using --with-log4cpp-inc=/some/path/\n\n";
  exit;
}

#
# --with-log4cpp-lib=
#
if($options=~m/--with-log4cpp-lib=(\S*)/i) {
  $log4cpp_lib = $1;
}
if(! -d $log4cpp_lib && $auto_detect)  {
  print " *** Warn *** You didn't specify the log4cpp library path -- Autodetecting...\n";
  $matched = auto_detect("liblog4cpp.*");
  if( $matched=~m/(\S*)\/liblog4cpp\S*/i ) {
     $log4cpp_lib = $1;
  }
  print "              Setting --with-log4cpp-lib=$log4cpp_lib\n\n";
}
if(! -d $log4cpp_lib) {
  print " *** Error *** You need to specify the log4cpp library path using --with-log4cpp-lib=/some/path/\n\n";
  exit;
}

# Save the --with options
#
print MKCONF "GOPT_CXX_OPTIMIZ_FLAG=-$gopt_cxx_optimiz_flag\n";
print MKCONF "GPROFILER_LIB=$gprofiler_lib\n";
print MKCONF "NEUGEN3PATH=$neugen3path\n";
print MKCONF "GIBUU_LIB=$gibuu_lib\n";
print MKCONF "DOXYGEN=$doxygen\n";
print MKCONF "CERNLIB=$cernlib\n";
print MKCONF "PYTHIA6=$pythia6\n";
print MKCONF "LIBXML2_INC=$libxml2_inc\n";
print MKCONF "LIBXML2_LIB=$libxml2_lib\n";
print MKCONF "LOG4CPP_INC=$log4cpp_inc\n";
print MKCONF "LOG4CPP_LIB=$log4cpp_lib\n";

close(MKCONF);

print "\nYour configuration options were:\n @ARGV \n\n";
if(-e $MKCONF_FILE) {
  print "The $GENIE/src/make/Make.config file has been succesfully generated! \n";
  print "To continue type: gmake \n";
  # warning for SRT users  
  if(defined $ENV{'SRT_ENV_SET'}) {
    print "Don't forget to 'srt_setup --unsetup' first\n";
  }
}

sub auto_detect {
  @search_dir  = ('/usr','/opt','/home','/WorkApp');
  $search_file = shift; 
  foreach(@search_dir) {
     $curr_dir = $_;
     if(! -d $curr_dir) {next;}
     @matches = `find $curr_dir -type f -maxdepth 5 -name $search_file`;
     $nmatches = @matches;
     if( $nmatches > 0) { return $matches[0]; }
  }
  return "";
}
