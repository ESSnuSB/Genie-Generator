//____________________________________________________________________________
/*!

\class    genie::flux::GJPARCNuFlux

\brief    A GENIE flux driver encapsulating the JPARC neutrino flux.
          It reads-in the official JPARC neutrino flux ntuples generated by
          Ichikawa-san.

\ref      See http://jnusrv01.kek.jp/internal/t2k/nubeam/flux/ 
          (Note: T2K internal)

\author   Costas Andreopoulos <C.V.Andreopoulos@rl.ac.uk>
          STFC, Rutherford Appleton Laboratory

\created  Feb 04, 2008

\cpright  Copyright (c) 2003-2008, GENIE Neutrino MC Generator Collaboration
          For the full text of the license visit http://copyright.genie-mc.org
          or see $GENIE/LICENSE
*/
//____________________________________________________________________________

#ifndef _GJPARC_NEUTRINO_FLUX_H_
#define _GJPARC_NEUTRINO_FLUX_H_

#include <string>

#include <TLorentzVector.h>
#include <TVector3.h>

#include "EVGDrivers/GFluxI.h"
#include "PDG/PDGUtils.h"

class TFile;
class TTree;
class TBranch;

using std::string;

namespace genie {
namespace flux  {

class GJPARCNuFluxPassThroughInfo;

class GJPARCNuFlux: public GFluxI {

public :
  GJPARCNuFlux();
 ~GJPARCNuFlux();

  //-- Methods implementing the GENIE GFluxI interface, required for integrating
  //   the JPARC neutrino flux simulations with the GENIE event generation drivers

  const PDGCodeList &    FluxParticles (void) { return *fPdgCList; }
  double                 MaxEnergy     (void) { return  fMaxEv;    }
  bool                   GenerateNext  (void);
  int                    PdgCode       (void) { return  fgPdgC;    }
  double                 Weight        (void) { return  fLfNorm;   }
  const TLorentzVector & Momentum      (void) { return  fgP4;      }
  const TLorentzVector & Position      (void) { return  fgX4;      }

  //-- Methods specific to the JPARC flux driver, 
  //   for configuration/initialization of the flux & event generation drivers and
  //   and for passing-through flux information (eg neutrino parent decay kinematics)
  //   not used by the generator but required by analyses/processing further upstream

  void LoadFile         (string filename);               ///< load a jnubeam root flux ntuple
  void SetFluxParticles (const PDGCodeList & particles); ///< declare list of flux neutrino species
  void SetMaxEnergy     (double Ev);                     ///< declare maximum flx neutrino energy
  void SetDetectorId    (int detector);                  ///< read flux for requested detector

  const GJPARCNuFluxPassThroughInfo & 
     PassThroughInfo(void) { return *fPassThroughInfo; } ///< GJPARCNuFluxPassThroughInfo

private:

  // ** Private methods
  //
  void Initialize   (void);
  void SetDefaults  (void);  
  void CleanUp      (void);
  void ResetCurrent (void);

  // ** Private data members
  //
  double         fMaxEv;       ///< maximum energy
  PDGCodeList *  fPdgCList;    ///< list of neutrino pdg-codes
  int            fgPdgC;       ///< running generated nu pdg-code
  TLorentzVector fgP4;         ///< running generated nu 4-momentum
  TLorentzVector fgX4;         ///< running generated nu 4-position
  TFile *   fNuFluxFile;       ///< input flux file
  TTree *   fNuFluxTree;       ///< input flux ntuple
  long int  fNEntries;         ///< number offlux ntuple entries
  long int  fIEntry;           ///< current flux ntuple entry
  TBranch * fBrNorm;           ///< 'norm'     branch: Weight for ND: flux /detector /1E+21 pot or FD: flux /cm2 /1E+21 pot
  TBranch * fBrIdfd;           ///< 'idfd'     branch: Detector ID
  TBranch * fBrEnu;            ///< 'Enu'      branch: Neutrino energy (GeV)
  TBranch * fBrRnu;            ///< 'rnu'      branch: Neutrino radial position (cm, in detectro coord system)
  TBranch * fBrXnu;            ///< 'xnu'      branch: Neutrino x position (cm, in detector coord system)
  TBranch * fBrYnu;            ///< 'ynu'      branch: Neutrino y position (cm, in detector coord system)
  TBranch * fBrNnu;            ///< 'nnu'      branch: Neutrino direction (in t2k global coord system)
  TBranch * fBrPpid;           ///< 'ppid'     branch: Neutrino parent GEANT particle id 
  TBranch * fBrMode;           ///< 'mode'     branch: Neutrino parent particle decay mode (see http://jnusrv01.kek.jp/internal/t2k/nubeam/flux/nemode.h)
  TBranch * fBrPpi;            ///< 'ppi'      branch: Neutrino parent particle momentum at its decay point (GeV)
  TBranch * fBrXpi;            ///< 'xpi'      branch: Neutrino parent particle position vector at decay (cm, in t2k global coord system)
  TBranch * fBrNpi;            ///< 'npi'      branch: Neutrino parent particle direction vector at decay (in t2k global coord system) 
  TBranch * fBrCospibm;        ///< 'cospibm'  branch: Neutrino parent particle direction cosine at decay (with respect to the beam direction)
  TBranch * fBrPpi0;           ///< 'ppi0'     branch: Neutrino parent particle momentum at its production point (GeV)
  TBranch * fBrXpi0;           ///< 'xpi0'     branch: Neutrino parent particle position vector at production (cm, in t2k global coord system)
  TBranch * fBrNpi0;           ///< 'npi0'     branch: Neutrino parent particle direction vector at production (in t2k global coord system)
  TBranch * fBrCospi0bm;       ///< 'cospi0bm' branch: Neutrino parent particle direction cosine at production (with respect to the beam direction)
  float     fLfNorm;           ///< leaf on branch 'norm'
  int       fLfIdfd;           ///< leaf on branch 'idfd'
  float     fLfEnu;            ///< leaf on branch 'Enu'
  float     fLfRnu;            ///< leaf on branch 'rnu'
  float     fLfXnu;            ///< leaf on branch 'xnu'
  float     fLfYnu;            ///< leaf on branch 'ynu'
  float     fLfNnu[3];         ///< leaf on branch 'nnu'
  int       fLfPpid;           ///< leaf on branch 'ppid'
  int       fLfMode;           ///< leaf on branch 'mode'
  float     fLfPpi;            ///< leaf on branch 'ppi'
  float     fLfXpi[3];         ///< leaf on branch 'xpi'
  float     fLfNpi[3];         ///< leaf on branch 'npi'
  float     fLfCospibm;        ///< leaf on branch 'cospibm'
  float     fLfPpi0;           ///< leaf on branch 'ppi0'
  float     fLfXpi0[3];        ///< leaf on branch 'xpi0'
  float     fLfNpi0[3];        ///< leaf on branch 'npi0'
  float     fLfCospi0bm;       ///< leaf on branch 'cospi0bm'

  GJPARCNuFluxPassThroughInfo * fPassThroughInfo;
};


// A small persistable C-struct - like class that may be stored at an extra branch of 
// the output event tree -alongside with the generated event branch- for use further 
// upstream in the t2k analysis chain -eg beam reweighting etc-)
//
class GJPARCNuFluxPassThroughInfo: public TObject { 
public:
   GJPARCNuFluxPassThroughInfo();
   GJPARCNuFluxPassThroughInfo(const GJPARCNuFluxPassThroughInfo & info);
   virtual ~GJPARCNuFluxPassThroughInfo() { };

   int    pdg, decayMode;
   double decayP, decayX, decayY, decayZ, decayDirX, decayDirY, decayDirZ;
   double prodP,  prodX,  prodY,  prodZ,  prodDirX,  prodDirY,  prodDirZ;

ClassDef(GJPARCNuFluxPassThroughInfo,1)
};

} // flux namespace
} // genie namespace

#endif // _GJPARC_NEUTRINO_FLUX_H_
