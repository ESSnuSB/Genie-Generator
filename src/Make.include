#
# Make.include for GENIE Object-Oriented Neutrino Generator
#
# Costas Andreopoulos (Rutherford Lab.) <C.V.Andreopoulos@rl.ac.uk>
#

#-------------------------------------------------------------------
#                 Read in configure script output
#-------------------------------------------------------------------
# Include file generated by the configure script
# Type './configure --help' for more information

include $(GENIE)/src/Make.config

ifndef GOPT_CXX_USERDEF_FLAGS
 GOPT_CXX_USERDEF_FLAGS=
endif

#-------------------------------------------------------------------
#                           ARCHITECTURE 
#-------------------------------------------------------------------
# As defined by ROOT
ARCH = $(shell root-config --arch)  

#-------------------------------------------------------------------
#                              GENIE
#-------------------------------------------------------------------

# GENIE paths
#
GENIE_LIB_PATH    := $(GENIE)/lib
GENIE_BIN_PATH    := $(GENIE)/bin
GENIE_SRC_PATH    := $(GENIE)/src
GENIE_CONFIG_PATH := $(GENIE)/config

# GENIE installation paths used with 'make install'
# The $GENIE_INSTALLATION_PATH is determined from ./configure --prefix=...
#
GENIE_LIB_INSTALLATION_PATH     := $(GENIE_INSTALLATION_PATH)/lib
GENIE_BIN_INSTALLATION_PATH     := $(GENIE_INSTALLATION_PATH)/bin
GENIE_INCBASE_INSTALLATION_PATH := $(GENIE_INSTALLATION_PATH)/include
GENIE_INC_INSTALLATION_PATH     := $(GENIE_INCBASE_INSTALLATION_PATH)/GENIE

# GENIE & NuValidator header files base dir
#
GENIE_INCLUDES := -I$(GENIE)/src/
NUVLD_INCLUDES := -I$(GENIE)/src/NuValidator/

# GENIE & NuValidator libraries
#
GENIE_ALGORITHM_LIBNAME        := libGAlgorithm
GENIE_BARYONRES_LIBNAME        := libGBaryonResonance
GENIE_BASE_LIBNAME             := libGBase
GENIE_BODEK_YANG_LIBNAME       := libGBodekYang
GENIE_CHARM_LIBNAME            := libGCharm
GENIE_DECAY_LIBNAME            := libGDecay
GENIE_ELASTIC_LIBNAME          := libGElas
GENIE_EVENT_GENERATION_LIBNAME := libGEventGen
GENIE_EVGCORE_LIBNAME          := libGEVGCore
GENIE_EVGDRIVERS_LIBNAME       := libGEVGDrivers
GENIE_EVGMODULES_LIBNAME       := libGEVGModules
GENIE_GEO_LIBNAME              := libGGeo
GENIE_GHEP_LIBNAME             := libGHEP
GENIE_HADRON_TRANSPORT_LIBNAME := libGHadronTransp
GENIE_LLEWELLYN_SMITH_LIBNAME  := libGLlewellynSmith
GENIE_FLUX_DRIVERS_LIBNAME     := libGFluxDrivers
GENIE_FRAGMENTATION_LIBNAME    := libGFragmentation
GENIE_INTERACTION_LIBNAME      := libGInteraction
GENIE_INVERSE_MU_DECAY_LIBNAME := libGInvMuDecay
GENIE_MSG_LIBNAME              := libGMessenger
GENIE_NTUPLE_LIBNAME           := libGNtuple
GENIE_NUCLEAR_LIBNAME          := libGNuclear
GENIE_NUMERICAL_LIBNAME        := libGNumerical
GENIE_REWEIGHT_LIBNAME         := libGReWeight
GENIE_PARTON_MODEL_LIBNAME     := libGPartonModel
GENIE_PASCHOS_LIBNAME          := libGPaschos
GENIE_PDG_LIBNAME              := libGPDG
GENIE_PDF_LIBNAME              := libGPDF
GENIE_RADIATIVE_LIBNAME        := libGRadiative
GENIE_REGISTRY_LIBNAME         := libGRegistry
GENIE_REIN_SEGHAL_LIBNAME      := libGReinSeghal
GENIE_UTILS_LIBNAME            := libGUtils
GENIE_VIEWER_LIBNAME           := libGViewer
GENIE_XSEC_LIBNAME             := libGCrossSections
GENIE_MUELOSS_LIBNAME          := libGMuELoss
GENIE_VHE_LIBNAME              := libGVHE

VLD_PARSER_LIBNAME             := libGNuVldXML
VLD_DBUTIL_LIBNAME             := libGNuVldDBU
VLD_GUI_WIDGETS_LIBNAME        := libGNuVldGUI
VLD_NEUGEN_INTERFACE_LIBNAME   := libGNuVldNeugen

GDUMMY_NEUGEN_LIBNAME          := libneugen3

# standard GENIE's Neutrino Generator libraries
#
GENIE_LIBRARIES := -L$(GENIE_LIB_PATH) \
  -lGAlgorithm -lGBaryonResonance -lGBase -lGBodekYang -lGCharm \
  -lGDecay -lGElas -lGHEP -lGLlewellynSmith -lGEVGCore -lGEVGModules -lGEVGDrivers\
  -lGFragmentation -lGInteraction -lGInvMuDecay -lGMessenger \
  -lGNtuple -lGNuclear -lGNumerical -lGEVGCore -lGEVGDrivers -lGEVGModules  \
  -lGHadronTransp -lGPartonModel -lGPaschos -lGPDG -lGPDF -lGRadiative -lGRegistry \
  -lGReinSeghal -lGUtils -lGCrossSections -lGReWeight

ifdef GOPT_FLUX_DRIVERS
  GENIE_LIBRARIES := $(GENIE_LIBRARIES) -lGFluxDrivers
endif
ifdef GOPT_GEOM_DRIVERS
  GENIE_LIBRARIES := $(GENIE_LIBRARIES) -lGGeo
endif
ifdef GOPT_VIEWER
  GENIE_LIBRARIES := $(GENIE_LIBRARIES) -lGViewer
endif

# standard GENIE's NuValidator libraries
#
NUVLD_CORE_LIBRARIES := -L$(GENIE_LIB_PATH) \
  -lGNuVldXML -lGNuVldDBU -lGNuVldGUI

NUVLD_LIBRARIES := $(NUVLD_CORE_LIBRARIES) -lGNuVldNeugen 

# look for traces of a previous installation at the specified
# installation location
#
ifeq ($(shell ls $(GENIE_INC_INSTALLATION_PATH) 2>/dev/null ),)
  GENIE_PREVIOUS_INSTALLATION = NO
else
  GENIE_PREVIOUS_INSTALLATION = YES
endif

#-------------------------------------------------------------------
#                             libxml2
#-------------------------------------------------------------------

# XML lib & include directories 

ifdef LIBXML2_INC
XML_INC_DIR = $(LIBXML2_INC)
else
XML_INC_DIR = /usr/include/libxml2
endif

ifdef LIBXML2_LIB
XML_LIB_DIR = $(LIBXML2_LIB)
else
XML_LIB_DIR = /usr/lib
endif

# XML libraries and headers

XML_INCLUDES  := -I$(XML_INC_DIR) 
XML_LIBRARIES := -L$(XML_LIB_DIR) -lxml2

#-------------------------------------------------------------------
#                             log4cpp
#-------------------------------------------------------------------

# log4cpp lib & include directory

ifdef LOG4CPP_INC
LOG_INC_DIR = $(LOG4CPP_INC)
else
LOG_INC_DIR = /usr/local/src/log4cpp/include
endif

ifdef LOG4CPP_LIB
LOG_LIB_DIR = $(LOG4CPP_LIB)
else
LOG_LIB_DIR = /usr/local/lib
endif

# log4cpp libraries and headers

LOG_INCLUDES  := -I$(LOG_INC_DIR)
LOG_LIBRARIES := -L$(LOG_LIB_DIR) -llog4cpp

#-------------------------------------------------------------------
#                             CERNLIB
#-------------------------------------------------------------------

# standard CERNLIBs used by PYTHIA and NeuGEN (and GENIE: pdflib)

CERN_LIB_DIR = $(CERNLIB)

# figure out which pdflib to use (name keeps changing)

#-- find all libraries named libpdflib*.a and remove the .a part
PPDFLIBS = $(subst .a,,$(wildcard $(CERN_LIB_DIR)/libpdflib*.a))
#-- if many were found use the first one
PPDFLIB  = $(shell awk 'BEGIN {str="$(PPDFLIBS)"; \
			split(str, tokens, " "); print tokens[1]}')
#-- remove the path name
PDFLIB   = $(shell awk 'BEGIN {str="$(PPDFLIB)"; \
			n=split(str, tokens, "/"); print tokens[n]}')
#-- replace the first lib with -l so libpdflib -> -lpdflib
LPDFLIB  = $(shell awk 'BEGIN { str="$(PDFLIB)"; \
				sub(/lib/, "-l", str); print str}')

CERN_LIBRARIES = -L$(CERN_LIB_DIR) \
		 $(LPDFLIB) -lkernlib -lmathlib -lpacklib -lg2c
ifeq ($(strip $(ARCH)),macosx) 
CERN_LIBRARIES = -L$(CERN_LIB_DIR) \
		 $(LPDFLIB) -lkernlib -lmathlib -lpacklib /usr/local/lib/libgfortran.dylib
endif

#-------------------------------------------------------------------
#                             PYTHIA6
#-------------------------------------------------------------------

# PYTHIA6 dir/lib/object file

PYTHIA_DIR = $(PYTHIA6)
PYTHIA_O   = $(wildcard $(PYTHIA_DIR)/pythia*.o) # match all vrs

PYTHIA_LIBRARIES  = -L$(PYTHIA_DIR) -lPythia6 $(PYTHIA_O)

ifeq ($(strip $(ARCH)),macosx) 
PYTHIA_LIBRARIES  = -L$(PYTHIA_DIR) -lPythia6 
endif

#-------------------------------------------------------------------
#                             NEUGEN3
#-------------------------------------------------------------------

ifeq ($(strip $(GOPT_ENABLE_NEUGEN)),NO) 

# if NeuGEN was not enabled a dummy NeuGEN library will be built so 
# that the NuValidator's NeuGEN facade can compile. In this case, 
# override NEUGEN3PATH (=GENIE)
  NEUGEN3PATH=$(GENIE)
  NEUGEN_LIBRARIES = -L$(NEUGEN3PATH)/lib -lneugen3 
else

# In case the actual NeuGEN library is used, add CERNLIB's stdhep
# which is used by NeuGEN (in addition to the 'std' CERNLIBs)
  NEUGEN_LIBRARIES = -L $(CERN_LIB_DIR) -lstdhep \
			-L$(NEUGEN3PATH)/lib -lneugen3 
endif

ifeq ($(strip $(ARCH)),macosx) 
  NEUGEN_LIBRARIES := $(NEUGEN_LIBRARIES) /usr/local/lib/libgfortran.dylib
else
  NEUGEN_LIBRARIES := $(NEUGEN_LIBRARIES) -lg2c
endif

#-------------------------------------------------------------------
#                             GIBUU
#-------------------------------------------------------------------

ifeq ($(strip $(GOPT_ENABLE_GIBUU)),NO) 

# GiBUU was not enabled 
  GIBUU_LIB       =
  GIBUU_LIBRARIES = 
else

# In case the actual fortran90 GIBUU library is used
  GIBUU_LIBRARIES = -L$(GIBUU_LIB)/lib -lGiBUU

ifeq ($(strip $(ARCH)),macosx) 
  GIBUU_LIBRARIES := $(GIBUU_LIBRARIES) /usr/local/lib/libgfortran.dylib
else
  GIBUU_LIBRARIES := $(GIBUU_LIBRARIES) -lg2c
endif

endif

#-------------------------------------------------------------------
#                              ROOT
#-------------------------------------------------------------------
# ROOT headers and libraries
ROOT_INCLUDES  = -I$(shell root-config --incdir)
ROOT_LIBRARIES = $(shell root-config --glibs) \
                        -lMinuit -lGeom -lEG -lEGPythia6

#-------------------------------------------------------------------
#                   PROFILING / DEBUGING OPTIONS
#-------------------------------------------------------------------
# Linking in the Google Profiling Tool library
#
GPROF_LIBRARIES = 
ifdef GOPT_PROFILER
  ifdef GPROFILER_LIB
    GPROF_LIBRARIES += -L$(GPROFILER_LIB) -lprofiler
  else
    GPROF_LIBRARIES += -L/usr/local/lib -lprofiler
  endif
endif

#-------------------------------------------------------------------
#                               DOXYGEN
#-------------------------------------------------------------------
# if doc was enabled but DOXYGEN was not set, try a default
#
ifdef GOPT_DOXYGEN_DOC
  ifndef DOXYGEN
    DOXYGEN=doxygen
  endif
endif

#-------------------------------------------------------------------
#                       Some global variables
#-------------------------------------------------------------------
MAKE   := gmake
RM      = rm -f
MKDIR   = mkdir -p
CAT     = cat
INSTALL = @INSTALL@

# AR, ARFLAGS and RANLIB are for manipulating an archive
AR        = ar
ARFLAGS   = rv
RANLIB    = ranlib

#-------------------------------------------------------------------
#                        COMPILER OPTIONS
#-------------------------------------------------------------------

# LINUX (with gcc)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ifeq ($(strip $(ARCH)),linux) 
CXX           = g++
CXXFLAGS      = $(GOPT_CXX_DEBUG_FLAG) $(GOPT_CXX_OPTIMIZ_FLAG) -Wall -fPIC
CXXFLAGS     += $(GOPT_CXX_USERDEF_FLAGS) 
LD            = g++
LDFLAGS       = -g
SOFLAGS       = -shared
DllSuf       := so
DllLinkSuf   := 
StaticLibSuf := a
ObjSuf       := o
SrcSuf       := cxx
FORT         := g77
FORTOPTS     := $(FFLAGS) -g -c -O -DLINUX $(F77INCS) -fno-second-underscore
RANLIB       := ranlib
SOCMD         = $(LD)
OutPutOpt     = -o
SOMINF =
endif

# MAC OS X (with gcc)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ifeq ($(strip $(ARCH)),macosx) 
CXX           = g++
CXXFLAGS      = $(GOPT_CXX_DEBUG_FLAG) $(GOPT_CXX_OPTIMIZ_FLAG) -pipe -W -Wall -Wno-long-double -fsigned-char -fno-common -flat_namespace
CXXFLAGS     += $(GOPT_CXX_USERDEF_FLAGS) 
LD            = g++
LDFLAGS       = -bind_at_load
SOFLAGS       = -dynamiclib -flat_namespace -single_module -undefined dynamic_lookup
DllSuf       := dylib
DllLinkSuf   := so
StaticLibSuf := a
ObjSuf       := o
SrcSuf       := cxx
FORT         := g77
FORTOPTS     := $(FFLAGS) -g -c -O -DLINUX $(F77INCS) -fno-second-underscore
RANLIB       := ranlib
SOCMD         = $(LD)
OutPutOpt     = -o
SOMINF =
endif

#-------------------------------------------------------------------
#                            SUMMING-UP
#-------------------------------------------------------------------

# LIBS should contain general libraries needed to compile programs. 

LIBRARIES := $(SYSLIBS) $(ROOT_LIBRARIES) $(PYTHIA_LIBRARIES) \
             $(XML_LIBRARIES) $(LOG_LIBRARIES) $(GPROF_LIBRARIES) -lnsl 

ifeq ($(strip $(ARCH)),macosx) 
LIBRARIES := $(SYSLIBS) $(ROOT_LIBRARIES) $(PYTHIA_LIBRARIES) \
             $(XML_LIBRARIES) $(LOG_LIBRARIES) $(GPROF_LIBRARIES) 
endif

INCLUDES  = $(ROOT_INCLUDES) $(XML_INCLUDES) $(LOG_INCLUDES) \
            $(GENIE_INCLUDES) $(NUVLD_INCLUDES)
INCLUDES := $(INCLUDES) $(LINUX_SYS_INCLUDES)

# Default compiler and preprocessor flags

CXXFLAGS := $(ENV_CXXFLAGS) $(CXXFLAGS)
CPPFLAGS  = $(INCLUDES)
CFLAGS    = -g
LDFLAGS  := $(LDFLAGS) $(LIBRARIES)

#-------------------------------------------------------------------
#                            MAKE RULES
#-------------------------------------------------------------------

.SUFFIXES : .inc .cxx

#.cc.o:
#	$(CXX) -c -o $@ $(CXXFLAGS) $(CPPFLAGS) $<

#.cxx.o:
#	$(CXX) -c -o $@ $(CXXFLAGS) $(CPPFLAGS) $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(CPPFLAGS) $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(CPPFLAGS) $<

.C.o:
	$(CXX) -c -o $@ $(CXXFLAGS) $(CPPFLAGS) $<

.c.o:
	$(CC) -c -o $@ $(CXXFLAGS) $(CPPFLAGS) $<

.F.o :
	$(FORT) $(FORTOPTS) -o $@ $<

.f.o :
	$(FORT) $(FORTOPTS) -o $@ $<

.F.a :
	$(FORT) $(FORTOPTS) -o $*.o $<
	$(AR) $(ARFLAGS) $@ $*.o
	$(RANLIB) $@
	$(RM) $*.o

.f.a :
	$(FORT) $(FORTOPTS) -o $*.o $<
	$(AR) $(ARFLAGS) $@ $*.o
	$(RANLIB) $@
	$(RM) $*.o
