//____________________________________________________________________________
/*!

\program gvld_nu_xsec

\brief   Compares GENIE neutrino cross-sections with the world data.

         Syntax:
           gvld_nu_xsec
                  [-d data_archive] [-g genie_inputs]

         Options:

           [] Denotes an optional argument.

           -d Location of the neutrino cross-section data archive.
              By default, the program will look-up the one located in:
              $GENIE/data/validation/vA/xsec/integrated/

           -g An XML file with GENIE inputs. 
              They are files with calculated cross-sections and event samples 
              used for decomposing the inclusive cross-section to various 
              exclusive cross-sections. 
              Multiple models can be included in the input file, each identified 
              by a "name" (all model predictions will be overlayed).
              For info on the XML file format see the GSimFiles class documentation.
              Notes:
              - The input ROOT cross section files are the ones generated by 
                GENIE's gspl2root utility. 
              - The input event files are `gst' summary ntuples generated by 
                GENIE gntpc utility.
              - A script for preparing inputs for this benchmark test can be 
                found in: $GENIE/src/scripts/production/batch/submit-vld_xsec.pl
             
\author  Costas Andreopoulos <costas.andreopoulos \at stfc.ac.uk>
         STFC, Rutherford Appleton Laboratory

\created June 06, 2008 

\cpright Copyright (c) 2003-2011, GENIE Neutrino MC Generator Collaboration
         For the full text of the license visit http://copyright.genie-mc.org
         or see $GENIE/LICENSE
*/
//____________________________________________________________________________

#include <cstdlib>
#include <cassert>
#include <sstream>
#include <string>

#include <TSystem.h>
#include <TFile.h>
#include <TDirectory.h>
#include <TTree.h>
#include <TGraph.h>
#include <TGraphAsymmErrors.h>
#include <TPostScript.h>
#include <TH1D.h>
#include <TMath.h>
#include <TCanvas.h>
#include <TPavesText.h>
#include <TText.h>
#include <TStyle.h>
#include <TLegend.h>
#include <TChain.h>

#include "Messenger/Messenger.h"
#include "Utils/CmdLnArgParser.h"
#include "Utils/GSimFiles.h"
#include "Utils/Style.h"

#include "validation/NuXSec/NuXSecData.h"
#include "validation/NuXSec/NuXSecFunc.h"
#include "validation/NuXSec/NuXSecComparison.h"

using std::ostringstream;
using std::string;

using namespace genie;
using namespace genie::mc_vs_data;

//
// This section specifies how exactly to construct all comparisons
//

const int kNumOfComparisons = 23;

NuXSecComparison * kComparison[kNumOfComparisons] = {

  // nu_mu CC inclusive,
  new NuXSecComparison(
    "#nu_{#mu} CC inclusive",
    "ANL_12FT,2;ANL_12FT,4;BEBC,0;BEBC,2;BEBC,5;BEBC,8;BNL_7FT,0;BNL_7FT,4;CCFR,2;CCFRR,0;CHARM,0;CHARM,4;FNAL_15FT,1;FNAL_15FT,2;Gargamelle,0;Gargamelle,10;Gargamelle,12;IHEP_ITEP,0;IHEP_ITEP,2;IHEP_JINR,0;SKAT,0",
     new NuXSecCombineSplinesFromXSecFile(0.5,"nu_mu_n","tot_cc_n",0.5,"nu_mu_H1","tot_cc_p"),
     0.1, 120.0, 
     true, true, false
  ),
  // nu_mu_bar CC inclusive
  new NuXSecComparison(
    "#bar{#nu_{#mu}} CC inclusive",
    "BEBC,1;BEBC,3;BEBC,6;BEBC,7;BNL_7FT,1;CCFR,3;CHARM,1;CHARM,5;FNAL_15FT,4;FNAL_15FT,5;Gargamelle,1;Gargamelle,11;Gargamelle,13;IHEP_ITEP,1;IHEP_ITEP,3;IHEP_JINR,1",
     new NuXSecCombineSplinesFromXSecFile(0.5,"nu_mu_bar_n","tot_cc_n",0.5,"nu_mu_bar_H1","tot_cc_p"),
     0.1, 120.0, 
     true, true, false
  ),

  // nu_mu CC inclusive, high-energy data only
  new NuXSecComparison(
    "#nu_{#mu} CC inclusive, high-energy data only",
    "ANL_12FT,2;ANL_12FT,4;BEBC,0;BEBC,2;BEBC,5;BEBC,8;BNL_7FT,0;BNL_7FT,4;CCFR,2;CCFRR,0;CHARM,0;CHARM,4;FNAL_15FT,1;FNAL_15FT,2;Gargamelle,0;Gargamelle,10;Gargamelle,12;IHEP_ITEP,0;IHEP_ITEP,2;IHEP_JINR,0;SKAT,0",
     new NuXSecCombineSplinesFromXSecFile(0.5,"nu_mu_n","tot_cc_n",0.5,"nu_mu_H1","tot_cc_p"),
     20, 120.0, 
     true, false, true
  ),
  // nu_mu_bar CC inclusive, high-energy data only
  new NuXSecComparison(
    "#bar{#nu_{#mu}} CC inclusive, high-energy data only",
    "BEBC,1;BEBC,3;BEBC,6;BEBC,7;BNL_7FT,1;CCFR,3;CHARM,1;CHARM,5;FNAL_15FT,4;FNAL_15FT,5;Gargamelle,1;Gargamelle,11;Gargamelle,13;IHEP_ITEP,1;IHEP_ITEP,3;IHEP_JINR,1",
     new NuXSecCombineSplinesFromXSecFile(0.5,"nu_mu_bar_n","tot_cc_n",0.5,"nu_mu_bar_H1","tot_cc_p"),
     20, 120.0, 
    true, false, true
  ),

  // nu_mu CC QE, all data
  new NuXSecComparison(
    "#nu_{#mu} CCQE, all data",
    "ANL_12FT,1;ANL_12FT,3;BEBC,12;BNL_7FT,3;FNAL_15FT,3;Gargamelle,2;SERP_A1,0;SERP_A1,1;SKAT,8",
     new NuXSecDirectlyFromXSecFile("nu_mu_n", "qel_cc_n"),
     0.1, 30.0, 
     true, false, false
  ),
  // nu_mu CC QE, light target data only
  new NuXSecComparison(
    "#nu_{#mu} CCQE, light target data",
    "ANL_12FT,1;ANL_12FT,3;BEBC,12;BNL_7FT,3;FNAL_15FT,3",
     new NuXSecDirectlyFromXSecFile("nu_mu_n", "qel_cc_n"),
     0.1, 30.0, 
     true, false, false
  ),
  // nu_mu CC QE, heavy target data only
  new NuXSecComparison(
    "#nu_{#mu} CCQE, heavy target data",
    "Gargamelle,2;SERP_A1,0;SERP_A1,1;SKAT,8",
     new NuXSecDirectlyFromXSecFile("nu_mu_n", "qel_cc_n"),
     0.1, 30.0, 
     true, false, false
  ),
  // nu_mu_bar CC QE, all data
  new NuXSecComparison(
    "#bar{#nu_{#mu}} CCQE, all data",
    "BNL_7FT,2;Gargamelle,3;Gargamelle,5;SERP_A1,2;SKAT,9",
     new NuXSecDirectlyFromXSecFile("nu_mu_bar_H1", "qel_cc_p"),
     0.1, 30.0, 
     true, false, false
  ),
  // nu_mu_bar CC QE, light target data only
  new NuXSecComparison(
    "#bar{#nu_{#mu}} CCQE, light target data",
    "BNL_7FT,2",
     new NuXSecDirectlyFromXSecFile("nu_mu_bar_H1", "qel_cc_p"),
     0.1, 30.0, 
     true, false, false
  ),
  // nu_mu_bar CC QE, heavy target data only
  new NuXSecComparison(
    "#bar{#nu_{#mu}} CCQE, heavy target data",
    "Gargamelle,3;Gargamelle,5;SERP_A1,2;SKAT,9",
     new NuXSecDirectlyFromXSecFile("nu_mu_bar_H1", "qel_cc_p"),
     0.1, 30.0, 
     true, false, false
  ),
  // nu_mu + p -> mu- + p + pi+ 
  new NuXSecComparison(
    "#nu_{#mu} CC1#pi^{+} (#nu_{#mu} p #rightarrow #mu^{-} p #pi^{+})",
    "ANL_12FT,0;ANL_12FT,5;ANL_12FT,8;BEBC,4;BEBC,9;BEBC,13;BNL_7FT,5;FNAL_15FT,0;Gargamelle,4;SKAT,4;SKAT,5",
    new NuXSecFromEventSample(
         "nu_mu_H1","tot_cc",
         "cc&&neu==14&&Z==1&&A==1",
         "cc&&neu==14&&Z==1&&A==1&&nfpim==0&&nfpi0==0&&nfpip==1&&nfp==1&&nfn==0"
     ),
     0.1, 30.0, 
     true, false, false
  ),
  // nu_mu + n -> mu- + n + pi+
  new NuXSecComparison(
    "#nu_{#mu} CC1#pi^{+} (#nu_{#mu} n #rightarrow #mu^{-} n #pi^{+})",
    "ANL_12FT,7;ANL_12FT,10;BNL_7FT,7;SKAT,7",
    new NuXSecFromEventSample(
         "nu_mu_n","tot_cc",
         "cc&&neu==14&&Z==0&&A==1",
         "cc&&neu==14&&Z==0&&A==1&&nfpim==0&&nfpi0==0&&nfpip==1&&nfp==0&&nfn==1"
     ),
     0.1, 30.0, 
     true, false, false
  ),
  // nu_mu + n -> mu- + p + pi0
  new NuXSecComparison(
    "#nu_{#mu} CC1#pi^{0} (#nu_{#mu} n #rightarrow #mu^{-} p #pi^{0})",
    "ANL_12FT,6;ANL_12FT,9;BNL_7FT,6;SKAT,6",
    new NuXSecFromEventSample(
         "nu_mu_n","tot_cc",
         "cc&&neu==14&&Z==0&&A==1",
         "cc&&neu==14&&Z==0&&A==1&&nfpim==0&&nfpi0==1&&nfpip==0&&nfp==1&&nfn==0"
     ),
     0.1, 30.0, 
     true, false, false
  ),
  // nu_mu + p -> mu- + n + pi+ + pi+
  new NuXSecComparison(
    "#nu_{#mu} CC#pi^{+}#pi^{+} (#nu_{#mu} p #rightarrow #mu^{-} n #pi^{+} #pi^{+})",
    "ANL_12FT,13",
     new NuXSecFromEventSample(
         "nu_mu_H1", "tot_cc",
         "cc&&neu==14&&Z==1&&A==1",
         "cc&&neu==14&&Z==1&&A==1&&nfpim==0&&nfpi0==0&&nfpip==2&&nfp==0&&nfn==1"
     ),
     1.0, 120.0, 
     true, false, false
  ),
  // nu_mu + p -> mu- + p + pi+ + pi0
  new NuXSecComparison(
    "#nu_{#mu} CC#pi^{+}#pi^{0} (#nu_{#mu} p #rightarrow #mu^{-} p #pi^{+} #pi^{0})",
    "ANL_12FT,12",
     new NuXSecFromEventSample(
          "nu_mu_H1", "tot_cc",
          "cc&&neu==14&&Z==1&&A==1",
          "cc&&neu==14&&Z==1&&A==1&&nfpim==0&&nfpi0==1&&nfpip==1&&nfp==1&&nfn==0"
     ),
     1.0, 120.0, 
     true, false, false
  ),
  // nu_mu + n -> mu- + p + pi+ + pi-
  new NuXSecComparison(
    "#nu_{#mu} CC#pi^{+}#pi^{-} (#nu_{#mu} n -> #mu^{-} p #pi^{+} #pi^{-})",
    "ANL_12FT,11;BNL_7FT,8",
     new NuXSecFromEventSample(
         "nu_mu_n", "tot_cc",
         "cc&&neu==14&&Z==0&&A==1",
         "cc&&neu==14&&Z==0&&A==1&&nfpim==1&&nfpi0==0&&nfpip==1&&nfp==1&&nfn==0"
     ),
     1.0, 120.0, 
     true, false, false
  ),
  // numu NC coherent pi, A = 20
  new NuXSecComparison(
     "#nu_{#mu} NC coherent #pi (^{20}Ne)", 
     "CHARM,2",
      new NuXSecDirectlyFromXSecFile("nu_mu_Ne20", "coh_nc"),
      1.0, 150.0, 
      false, false, false
  ),
  // numu CC coherent pi, A = 20
  new NuXSecComparison(
    "#nu_{#mu} CC coherent #pi (^{20}Ne)",
    "BEBC,11;CHARM,6;FNAL_15FT,8",
     new NuXSecDirectlyFromXSecFile("nu_mu_Ne20", "coh_cc"), 
     1.0, 150.0, 
     false, false, false
  ),
  // nu_mu_bar CC coherent pi, A = 20
  new NuXSecComparison(
    "#bar{#nu_{#mu}} CC coherent #pi (^{20}Ne)",
    "BEBC,10;CHARM,7;FNAL_15FT,7",
     new NuXSecDirectlyFromXSecFile("nu_mu_bar_Ne20", "coh_cc"),
     1.0, 150.0, 
     false, false, false
  ),
  // numu NC coherent pi, A = 27
  new NuXSecComparison(
    "#nu_{#mu} NC coherent #pi (^{27}Al)",
    "AachenPadova,0",
     new NuXSecDirectlyFromXSecFile("nu_mu_Al27", "coh_nc"),
     1.0, 150.0, 
     false, false, false
  ),
  // numu NC coherent pi, A = 30
  new NuXSecComparison(
    "#nu_{#mu} NC coherent #pi (^{30}Si)",
    "Gargamelle,14;SKAT,3",
     new NuXSecDirectlyFromXSecFile("nu_mu_Si30", "coh_nc"),
     1.0, 150.0, 
     false, false, false
  ),
  // numu CC coherent pi, A = 30
  new NuXSecComparison(
    "#nu_{#mu} CC coherent #pi (^{30}Si)",
    "SKAT,1",
     new NuXSecDirectlyFromXSecFile("nu_mu_Si30", "coh_cc"),
     1.0, 150.0, 
     false, false, false
  ),
  // nu_mu_bar CC coherent pi, A = 30
  new NuXSecComparison(
    "#bar{#nu_{#mu}} CC coherent #pi (^{30}Si)",
    "SKAT,2",
     new NuXSecDirectlyFromXSecFile("nu_mu_bar_Si30", "coh_cc"),
     1.0, 150.0, 
     false, false, false
  )
};

// function prototypes
void     Init               (void);
void     End                (void);
void     AddCoverPage       (void);
void     Draw               (int icomparison);
TH1F *   DrawFrame          (TGraph * gr0, TGraph * gr1);
TH1F *   DrawFrame          (double xmin, double xmax, double ymin, double yman);
void     GetCommandLineArgs (int argc, char ** argv);
void     PrintSyntax        (void);

// command-line arguments
GSimFiles gOptGenieInputs;
string gOptDataFilename = "";  // -d
string gOptGenieFileList = ""; // -g

// default data archive
const char * kDefDataFile = "data/validation/vA/xsec/integrated/nuXSec.root";  

// globals
NuXSecData    gNuXSecData;
TPostScript * gPS              = 0;
TCanvas *     gC               = 0;
TLegend *     gLS              = 0;
bool          gShowModel       = false;

//
// Data-point & GENIE-prediction styles
//

const int kNMaxModels   =  3;

const int kModelLineStyle [kNMaxModels] = 
{ 
  kSolid, kDashed, kDotted
};

//_________________________________________________________________________________
int main(int argc, char ** argv)
{
  GetCommandLineArgs (argc,argv);

  Init();

  // loop over specified comparisons and generate plots
  for(int i = 0; i < kNumOfComparisons; i++) 
  {
    LOG("gvldtest", pNOTICE) 
      << "Perforing data/MC comparison: " << kComparison[i]->Label();
    Draw(i);
  }

  End();

  LOG("gvldtest", pNOTICE)  << "Done!";
  return 0;
}
//_________________________________________________________________________________
void Init(void)
{
  LOG("gvldtest", pNOTICE) << "Initializing...";

  // Set GENIE style
  utils::style::SetDefaultStyle();

  // Open data archive
  bool ok = gNuXSecData.OpenArchive(gOptDataFilename);
  if(!ok) {
      LOG("gvldtest", pFATAL) 
         << "Could not open the neutrino cross-section data archive: "
         << gOptDataFilename;
      gAbortingInErr = true;
      exit(1);
  }

  // Read GENIE inputs
  if(gShowModel) {
     ok = gOptGenieInputs.LoadFromFile(gOptGenieFileList);
     if(!ok) {
        LOG("gvldtest", pFATAL) 
         << "Could not read GENIE inputs specified in XML file: " 
         << gOptGenieFileList;
        gAbortingInErr = true;
        exit(1);
     }

     // init functors
     for(int icomparison = 0; icomparison < kNumOfComparisons; icomparison++) {
        NuXSecFunc * xsec_func = kComparison[icomparison]->XSecFunc();
        xsec_func->Init(&gOptGenieInputs);
     }
  }

  // canvas
  gC = new TCanvas("c","",20,20,500,650);
  gC->SetBorderMode(0);
  gC->SetFillColor(0);
  gC->SetGridx();
  gC->SetGridy();

  gLS = new TLegend(0.15,0.92,0.85,0.98);
  gLS -> SetFillColor(0);
  gLS -> SetBorderSize(1);

  // output postscript file
  gPS = new TPostScript("genie_nuxec_vs_data.ps", 111);

  // cover page
  AddCoverPage();

//  gC->SetLogx();
//  gC->SetLogy();
}
//_________________________________________________________________________________
void AddCoverPage(void)
{
  // header
  gPS->NewPage();
  gC->Range(0,0,100,100);
  TPavesText hdr(10,40,90,70,3,"tr");
  hdr.AddText(" ");
  hdr.AddText("GENIE Neutrino Cross-Section Comparisons with World Data");
  hdr.AddText(" ");
  hdr.AddText(" ");
  // for(int imodel=0; imodel< gOptGenieInputs.NModels(); imodel++) {
  //  ostringstream stream;
  //  stream << "model tag: " << gOptGenieInputs.ModelTag(imodel)
  //  hdr.AddText(stream.str().c_str());
  // }
  hdr.AddText(" ");
  hdr.Draw();
  gC->Update();
}
//_________________________________________________________________________________
void End(void)
{
  LOG("gvldtest", pNOTICE) << "Cleaning up...";

  gPS->Close();

  delete gC;
  delete gLS;
  delete gPS;
}
//_________________________________________________________________________________
void Draw(int icomparison)
{
  // info on current comparison
  string dataset_keys = kComparison[icomparison]->DataSetKeys();
  double emin         = kComparison[icomparison]->Emin();
  double emax         = kComparison[icomparison]->Emax();
  bool   scale        = kComparison[icomparison]->ScaleWithE();
  bool   inlogx       = kComparison[icomparison]->InLogX();
  bool   inlogy       = kComparison[icomparison]->InLogY();

  // get all measurements for the current channel
  vector<TGraphAsymmErrors *> data = gNuXSecData.Retrieve(dataset_keys,emin,emax,scale);

  // get the corresponding GENIE model prediction
  vector<TGraph *> models;
  if(gShowModel) {
    for(int imodel=0; imodel< gOptGenieInputs.NModels(); imodel++) {
      NuXSecFunc & xsec_func = *kComparison[icomparison]->XSecFunc();
      TGraph * model = xsec_func(imodel, emin, emax, 50, scale);
      model->SetTitle(gOptGenieInputs.ModelTag(imodel).c_str());
      int lsty = kModelLineStyle[imodel];     
      utils::style::Format(model,kBlack,lsty,2,1,1,1);
      models.push_back(model);
    }
  }

  // add a new page in the output ps file
  gPS->NewPage();
  gC->Clear();
  gC->Divide(2,1);
  gC->GetPad(1)->SetPad("mplots_pad","",0.01,0.25,0.99,0.99);
  gC->GetPad(2)->SetPad("legend_pad","",0.01,0.01,0.99,0.24);
  gC->GetPad(1)->SetFillColor(0);
  gC->GetPad(1)->SetBorderMode(0);
  gC->GetPad(2)->SetFillColor(0);
  gC->GetPad(2)->SetBorderMode(0);
  gC->GetPad(1)->cd();
  gC->GetPad(1)->SetBorderMode(0);
  gC->GetPad(1)->SetLogx(inlogx);
  gC->GetPad(1)->SetLogy(inlogy);

  // set header
  gLS->SetHeader( kComparison[icomparison]->Label().c_str() );
  gLS->SetLineStyle(0);

  // create frame from the data point range
  TH1F * hframe = 0;
  double xmin =  9999999;
  double xmax = -9999999;
  double ymin =  9999999;
  double ymax = -9999999;
  for(unsigned int i = 0; i< data.size(); i++) {
    if(!data[i]) continue;
    xmin  = TMath::Min(xmin, (data[i]->GetX())[TMath::LocMin(data[i]->GetN(),data[i]->GetX())]);
    xmax  = TMath::Max(xmax, (data[i]->GetX())[TMath::LocMax(data[i]->GetN(),data[i]->GetX())]);
    ymin  = TMath::Min(ymin, (data[i]->GetY())[TMath::LocMin(data[i]->GetN(),data[i]->GetY())]);
    ymax  = TMath::Max(ymax, (data[i]->GetY())[TMath::LocMax(data[i]->GetN(),data[i]->GetY())] );
  }
  double ymax_scale = (inlogy) ? 2. : 1.4;
  hframe = (TH1F*) gC->GetPad(1)->DrawFrame(0.5*xmin, 0.4*ymin, 1.2*xmax, ymax_scale*ymax);
  hframe->GetXaxis()->SetTitle("E_{#nu} (GeV)");
  if(scale) {
    hframe->GetYaxis()->SetTitle("#sigma_{#nu}/E_{#nu} (1E-38 cm^{2}/GeV^{2})");
  } else {
    hframe->GetYaxis()->SetTitle("#sigma_{#nu} (1E-38 cm^{2}/GeV)");
  }
  hframe->Draw();
  
  // add legend
  TLegend * legend = new TLegend(0.01, 0.01, 0.99, 0.99);
  legend->SetLineStyle(0);
  legend->SetFillColor(0);
  legend->SetTextSize(0.06);

  // draw current data set
  for(unsigned int i = 0; i< data.size(); i++) {
    if(!data[i]) continue;
    data[i]->Draw("P");
    legend->AddEntry(data[i], data[i]->GetTitle(), "LP");
  }  

  // have model prediction to plot?
  if(models.size()>0) {
     for(int imodel=0; imodel<gOptGenieInputs.NModels(); imodel++) {
       if(!models[imodel]) continue;
       models[imodel]->Draw("L");
       legend->AddEntry(models[imodel], models[imodel]->GetTitle(), "L");
     }
  }//model?

  gLS->Draw();

  gC->GetPad(2)->cd();
  legend->Draw();

  gC->GetPad(2)->Update();
  gC->Update();

 //gC->SaveAs(Form("gxs%d.eps",iset));

}
//_________________________________________________________________________________
// Formatting
//.................................................................................
TH1F* DrawFrame(TGraph * gr0, TGraph * gr1)
{
  double xmin = 1E-5;
  double xmax = 1;
  double ymin = 1E-5;
  double ymax = 1;

  if(gr0) {  
    TAxis * x0 = gr0 -> GetXaxis();
    TAxis * y0 = gr0 -> GetYaxis();
    xmin = x0 -> GetXmin();
    xmax = x0 -> GetXmax();
    ymin = y0 -> GetXmin();
    ymax = y0 -> GetXmax();
  }
  if(gr1) {
     TAxis * x1 = gr1 -> GetXaxis();
     TAxis * y1 = gr1 -> GetYaxis();
     xmin = TMath::Min(xmin, x1 -> GetXmin());
     xmax = TMath::Max(xmax, x1 -> GetXmax());
     ymin = TMath::Min(ymin, y1 -> GetXmin());
     ymax = TMath::Max(ymax, y1 -> GetXmax());
  }
  xmin *= 0.5;
  xmax *= 1.5;
  ymin *= 0.5;
  ymax *= 1.5;
  xmin = TMath::Max(0.1, xmin);
  
  return DrawFrame(xmin, xmax, ymin, ymax);
}
//_________________________________________________________________________________
TH1F* DrawFrame(double xmin, double xmax, double ymin, double ymax)
{
  TH1F * hf = (TH1F*) gC->DrawFrame(xmin, ymin, xmax, ymax);
  hf->GetXaxis()->SetTitle("E (GeV)");
  hf->GetYaxis()->SetTitle("#sigma (10^{-38} cm^{2})");
  hf->GetYaxis()->SetTitleSize(0.03);
  hf->GetYaxis()->SetTitleOffset(1.3);
  hf->GetXaxis()->SetLabelSize(0.03);
  hf->GetYaxis()->SetLabelSize(0.03);
  return hf;
}
//_________________________________________________________________________________
// Parsing command-line arguments, check/form filenames, etc
//.................................................................................
void GetCommandLineArgs(int argc, char ** argv)
{
  LOG("gvldtest", pNOTICE) << "*** Parsing command line arguments";

  CmdLnArgParser parser(argc,argv);

  // get data archive
  if(parser.OptionExists('d')){
     string filename = parser.ArgAsString('d');
     gOptDataFilename = filename;
  } else {
     if(gSystem->Getenv("GENIE")) {
        string base_dir = string( gSystem->Getenv("GENIE") );
        string filename = base_dir + "/" + kDefDataFile;
        gOptDataFilename = filename;
     } else { 
        LOG("gvldtest", pFATAL) 
          << "\n Please make sure that $GENIE is defined, or use the -d option"
          << "\n You didn't specify a data file and I can not pick the default one either";
        gAbortingInErr = true;
        exit(1);
     }
  }

  // get GENIE inputs
  gShowModel = false;
  if( parser.OptionExists('g') ) {
     gOptGenieFileList = parser.ArgAsString('g');
     gShowModel = true;
  }

}
//_________________________________________________________________________________
void PrintSyntax(void)
{
  LOG("gvldtest", pNOTICE)
    << "\n\n" << "Syntax:" << "\n"
    << "   gvld_nu_xsec [-g genie_inputs] [-d data_archive]\n";
}
//_________________________________________________________________________________

